// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: org.wasmcloud.interface.experimental.sysmonitor

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

/// An event containing observed metrics
#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
pub struct MetricEvent {
    /// Extra statistics that can be sent. Must be encoded as a map of string, string
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_data: Option<StringMap>,
    /// The hostname where these metrics are coming from
    #[serde(default)]
    pub hostname: String,
    /// Metrics generated from the system information
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub system: Option<SystemMetrics>,
    /// A unique UUIDv4 for the provider sending this data. This can be generated on provider start
    #[serde(default)]
    pub uuid: String,
}

// Encode MetricEvent as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_metric_event<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &MetricEvent,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(4)?;
    if let Some(val) = val.extra_data.as_ref() {
        e.str("extra_data")?;
        encode_string_map(e, val)?;
    } else {
        e.null()?;
    }
    e.str("hostname")?;
    e.str(&val.hostname)?;
    if let Some(val) = val.system.as_ref() {
        e.str("system")?;
        encode_system_metrics(e, val)?;
    } else {
        e.null()?;
    }
    e.str("uuid")?;
    e.str(&val.uuid)?;
    Ok(())
}

// Decode MetricEvent from cbor input stream
#[doc(hidden)]
pub fn decode_metric_event(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<MetricEvent, RpcError> {
    let __result = {
        let mut extra_data: Option<Option<StringMap>> = Some(None);
        let mut hostname: Option<String> = None;
        let mut system: Option<Option<SystemMetrics>> = Some(None);
        let mut uuid: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct MetricEvent, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        extra_data = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( decode_string_map(d).map_err(|e| format!("decoding 'org.wasmcloud.interface.experimental.sysmonitor#StringMap': {}", e))? ))
                        }
                    }
                    1 => hostname = Some(d.str()?.to_string()),
                    2 => {
                        system = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( decode_system_metrics(d).map_err(|e| format!("decoding 'org.wasmcloud.interface.experimental.sysmonitor#SystemMetrics': {}", e))? ))
                        }
                    }
                    3 => uuid = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "extra_data" => {
                        extra_data = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( decode_string_map(d).map_err(|e| format!("decoding 'org.wasmcloud.interface.experimental.sysmonitor#StringMap': {}", e))? ))
                        }
                    }
                    "hostname" => hostname = Some(d.str()?.to_string()),
                    "system" => {
                        system = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( decode_system_metrics(d).map_err(|e| format!("decoding 'org.wasmcloud.interface.experimental.sysmonitor#SystemMetrics': {}", e))? ))
                        }
                    }
                    "uuid" => uuid = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        MetricEvent {
            extra_data: extra_data.unwrap(),

            hostname: if let Some(__x) = hostname {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MetricEvent.hostname (#1)".to_string(),
                ));
            },
            system: system.unwrap(),

            uuid: if let Some(__x) = uuid {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MetricEvent.uuid (#3)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
pub type StringMap = std::collections::HashMap<String, String>;

// Encode StringMap as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_string_map<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &StringMap,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(val.len() as u64)?;
    for (k, v) in val {
        e.str(k)?;
        e.str(v)?;
    }
    Ok(())
}

// Decode StringMap from cbor input stream
#[doc(hidden)]
pub fn decode_string_map(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<StringMap, RpcError> {
    let __result = {
        {
            let map_len = d.fixed_map()? as usize;
            let mut m: std::collections::HashMap<String, String> =
                std::collections::HashMap::with_capacity(map_len);
            for _ in 0..map_len {
                let k = d.str()?.to_string();
                let v = d.str()?.to_string();
                m.insert(k, v);
            }
            m
        }
    };
    Ok(__result)
}
/// Metrics from the system. All of these metrics could be entirely optional depending on what
/// system is being observed
#[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]
pub struct SystemMetrics {
    /// Percentage of CPU used by user space processes (if applicable)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu_usage_percentage: Option<f32>,
    /// The amount of swap free (if applicable)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub free_memory: Option<u64>,
    /// The amount of memory for the system (if applicable)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<u64>,
    /// The number of CPUs available to the system (if applicable)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub num_cpu: Option<u32>,
    /// The amount of swap for the system (if applicable)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub swap: Option<u64>,
    /// The amount of memory used (if applicable)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub used_memory: Option<u64>,
    /// The amount of swap used (if applicable)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub used_swap: Option<u64>,
}

// Encode SystemMetrics as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_system_metrics<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &SystemMetrics,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(7)?;
    if let Some(val) = val.cpu_usage_percentage.as_ref() {
        e.str("cpu_usage_percentage")?;
        e.f32(*val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.free_memory.as_ref() {
        e.str("free_memory")?;
        e.u64(*val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.memory.as_ref() {
        e.str("memory")?;
        e.u64(*val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.num_cpu.as_ref() {
        e.str("num_cpu")?;
        e.u32(*val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.swap.as_ref() {
        e.str("swap")?;
        e.u64(*val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.used_memory.as_ref() {
        e.str("used_memory")?;
        e.u64(*val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.used_swap.as_ref() {
        e.str("used_swap")?;
        e.u64(*val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode SystemMetrics from cbor input stream
#[doc(hidden)]
pub fn decode_system_metrics(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<SystemMetrics, RpcError> {
    let __result = {
        let mut cpu_usage_percentage: Option<Option<f32>> = Some(None);
        let mut free_memory: Option<Option<u64>> = Some(None);
        let mut memory: Option<Option<u64>> = Some(None);
        let mut num_cpu: Option<Option<u32>> = Some(None);
        let mut swap: Option<Option<u64>> = Some(None);
        let mut used_memory: Option<Option<u64>> = Some(None);
        let mut used_swap: Option<Option<u64>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct SystemMetrics, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        cpu_usage_percentage = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.f32()?))
                        }
                    }
                    1 => {
                        free_memory = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    2 => {
                        memory = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    3 => {
                        num_cpu = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u32()?))
                        }
                    }
                    4 => {
                        swap = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    5 => {
                        used_memory = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    6 => {
                        used_swap = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "cpu_usage_percentage" => {
                        cpu_usage_percentage = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.f32()?))
                        }
                    }
                    "free_memory" => {
                        free_memory = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    "memory" => {
                        memory = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    "num_cpu" => {
                        num_cpu = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u32()?))
                        }
                    }
                    "swap" => {
                        swap = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    "used_memory" => {
                        used_memory = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    "used_swap" => {
                        used_swap = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        SystemMetrics {
            cpu_usage_percentage: cpu_usage_percentage.unwrap(),
            free_memory: free_memory.unwrap(),
            memory: memory.unwrap(),
            num_cpu: num_cpu.unwrap(),
            swap: swap.unwrap(),
            used_memory: used_memory.unwrap(),
            used_swap: used_swap.unwrap(),
        }
    };
    Ok(__result)
}
/// The Sysmonitor service has a single method for actor receivers to implement. The received event
/// is not guaranteed to arrive on any specific schedule
/// wasmbus.contractId: wasmcloud:exp:sysmonitor
/// wasmbus.actorReceive
#[async_trait]
pub trait Sysmonitor {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "wasmcloud:exp:sysmonitor"
    }
    /// Sends a MetricEvent to an actor to be handled
    async fn handle_metric_event(&self, ctx: &Context, arg: &MetricEvent) -> RpcResult<()>;
}

/// SysmonitorReceiver receives messages defined in the Sysmonitor service trait
/// The Sysmonitor service has a single method for actor receivers to implement. The received event
/// is not guaranteed to arrive on any specific schedule
#[doc(hidden)]
#[async_trait]
pub trait SysmonitorReceiver: MessageDispatch + Sysmonitor {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "HandleMetricEvent" => {
                let value: MetricEvent = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'MetricEvent': {}", e)))?;

                let _resp = Sysmonitor::handle_metric_event(self, ctx, &value).await?;
                let buf = Vec::new();
                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Sysmonitor::{}",
                message.method
            ))),
        }
    }
}

/// SysmonitorSender sends messages to a Sysmonitor service
/// The Sysmonitor service has a single method for actor receivers to implement. The received event
/// is not guaranteed to arrive on any specific schedule
/// client for sending Sysmonitor messages
#[derive(Clone, Debug)]
pub struct SysmonitorSender<T: Transport> {
    transport: T,
}

impl<T: Transport> SysmonitorSender<T> {
    /// Constructs a SysmonitorSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> SysmonitorSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl SysmonitorSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Sysmonitor for SysmonitorSender<T> {
    #[allow(unused)]
    /// Sends a MetricEvent to an actor to be handled
    async fn handle_metric_event(&self, ctx: &Context, arg: &MetricEvent) -> RpcResult<()> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Sysmonitor.HandleMetricEvent",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;
        Ok(())
    }
}
